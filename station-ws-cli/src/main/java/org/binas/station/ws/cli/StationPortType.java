
package org.binas.station.ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebService(name = "StationPortType", targetNamespace = "http://ws.station.binas.org/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface StationPortType {


    /**
     * 
     * @return
     *     returns org.binas.station.ws.StationView
     */
    @WebMethod
    @WebResult(name = "stationInfo", targetNamespace = "")
    @RequestWrapper(localName = "getInfo", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.GetInfo")
    @ResponseWrapper(localName = "getInfoResponse", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.GetInfoResponse")
    @Action(input = "http://ws.station.binas.org/Station/getInfoRequest", output = "http://ws.station.binas.org/Station/getInfoResponse")
    public StationView getInfo();

    /**
     * 
     * @throws NoBinaAvail_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "getBina", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.GetBina")
    @ResponseWrapper(localName = "getBinaResponse", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.GetBinaResponse")
    @Action(input = "http://ws.station.binas.org/Station/getBinaRequest", output = "http://ws.station.binas.org/Station/getBinaResponse", fault = {
        @FaultAction(className = NoBinaAvail_Exception.class, value = "http://ws.station.binas.org/Station/getBina/Fault/NoBinaAvail")
    })
    public void getBina()
        throws NoBinaAvail_Exception
    ;

    /**
     * 
     * @return
     *     returns int
     * @throws NoSlotAvail_Exception
     */
    @WebMethod
    @WebResult(name = "returnBina", targetNamespace = "")
    @RequestWrapper(localName = "returnBina", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.ReturnBina")
    @ResponseWrapper(localName = "returnBinaResponse", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.ReturnBinaResponse")
    @Action(input = "http://ws.station.binas.org/Station/returnBinaRequest", output = "http://ws.station.binas.org/Station/returnBinaResponse", fault = {
        @FaultAction(className = NoSlotAvail_Exception.class, value = "http://ws.station.binas.org/Station/returnBina/Fault/NoSlotAvail")
    })
    public int returnBina()
        throws NoSlotAvail_Exception
    ;

    /**
     * 
     * @param inputMessage
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "test_ping")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "test_ping", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.TestPing")
    @ResponseWrapper(localName = "test_ping_response", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.TestPingResponse")
    @Action(input = "http://ws.station.binas.org/Station/test_ping_request", output = "http://ws.station.binas.org/Station/test_ping_response")
    public String testPing(
        @WebParam(name = "input_message", targetNamespace = "")
        String inputMessage);

    /**
     * 
     */
    @WebMethod(operationName = "test_clear")
    @RequestWrapper(localName = "test_clear", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.TestClear")
    @ResponseWrapper(localName = "test_clear_response", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.TestClearResponse")
    @Action(input = "http://ws.station.binas.org/Station/test_clear_request", output = "http://ws.station.binas.org/Station/test_clear_response")
    public void testClear();

    /**
     * 
     * @param returnPrize
     * @param x
     * @param y
     * @param capacity
     * @throws BadInit_Exception
     */
    @WebMethod(operationName = "test_init")
    @RequestWrapper(localName = "test_init", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.TestInit")
    @ResponseWrapper(localName = "test_init_response", targetNamespace = "http://ws.station.binas.org/", className = "org.binas.station.ws.TestInitResponse")
    @Action(input = "http://ws.station.binas.org/Station/test_init_request", output = "http://ws.station.binas.org/Station/test_init_response", fault = {
        @FaultAction(className = BadInit_Exception.class, value = "http://ws.station.binas.org/Station/test_init/Fault/BadInit")
    })
    public void testInit(
        @WebParam(name = "x", targetNamespace = "")
        int x,
        @WebParam(name = "y", targetNamespace = "")
        int y,
        @WebParam(name = "capacity", targetNamespace = "")
        int capacity,
        @WebParam(name = "return_prize", targetNamespace = "")
        int returnPrize)
        throws BadInit_Exception
    ;

}
